;;TODO - Temporarily disable until certain it's necessary for workflows
;;(when (memq window-system '(mac ns x))
;;  (exec-path-from-shell-initialize))

(require 'clojure-mode)
(require 'paredit)

(eval-after-load 'paredit
  '(progn
     (define-key paredit-mode-map (kbd "M-<right>") 'paredit-forward)
     (define-key paredit-mode-map (kbd "M-<left>") 'paredit-backward)
     (define-key paredit-mode-map (kbd "M-<up>") 'paredit-backward-up)
     (define-key paredit-mode-map (kbd "M-<down>") 'paredit-forward-down)
     (define-key paredit-mode-map (kbd "M-q") 'paredit-reindent-defun)
     (define-key paredit-mode-map (kbd "C-<left>") 'paredit-forward-barf-sexp)
     (define-key paredit-mode-map (kbd "C-M-<right>") 'paredit-backward-barf-sexp)
     (define-key paredit-mode-map (kbd "C-<right>") 'paredit-forward-slurp-sexp)
     (define-key paredit-mode-map (kbd "C-M-<left>") 'paredit-backward-slurp-sexp)
     (define-key paredit-mode-map (kbd "M-S-s") 'paredit-split-sexp)
     (define-key paredit-mode-map (kbd "M-s") 'paredit-splice-sexp)
     (define-key paredit-mode-map (kbd "C-k") 'paredit-kill)
     (define-key paredit-mode-map (kbd "C-S-k") 'paredit-kill-backward)
     (define-key paredit-mode-map (kbd "M-[") 'paredit-wrap-square)
     (define-key paredit-mode-map (kbd "M-{") 'paredit-wrap-curly)
     (define-key paredit-mode-map (kbd "M-<right>") 'forward-sexp)
     (define-key paredit-mode-map (kbd "M-<left>") 'backward-sexp)
     (define-key paredit-mode-map (kbd "M-<up>") 'backward-up-list)
     (define-key paredit-mode-map (kbd "M-<down>") 'down-list)
     (define-key paredit-mode-map (kbd "<A-return>") 'paredit-newline)))

(eval-after-load 'clojure-mode
  '(progn
     (define-key paredit-mode-map (kbd "C-M-x") 'lisp-eval-defun)
     (define-key paredit-mode-map (kbd "C-x C-e") 'lisp-eval-last-sexp)
     (define-key paredit-mode-map (kbd "C-c C-e") 'lisp-eval-last-sexp)
     (define-key paredit-mode-map (kbd "C-c C-z") 'run-clojure)
     (define-key paredit-mode-map (kbd "C-c C-r") 'lisp-eval-region)
     (define-key paredit-mode-map (kbd "C-x C-e") 'lisp-eval-last-sexp)
     (define-key paredit-mode-map (kbd "C-c C-a") 'lisp-show-arglist)
     (define-key paredit-mode-map (kbd "C-c C-c") 'lisp-compile-defun)
     (define-key paredit-mode-map (kbd "C-c C-d") 'lisp-describe-sym)
     (define-key paredit-mode-map (kbd "C-c C-e") 'lisp-eval-defun)
     (define-key paredit-mode-map (kbd "C-c C-f") 'lisp-show-function-documentation)
     (define-key paredit-mode-map (kbd "C-c C-k") 'lisp-compile-file)
     (define-key paredit-mode-map (kbd "C-c C-l") 'lisp-load-file)
     (define-key paredit-mode-map (kbd "C-c C-n") 'lisp-eval-form-and-next)
     (define-key paredit-mode-map (kbd "C-c C-p") 'lisp-eval-paragraph)
     (define-key paredit-mode-map (kbd "C-c C-r") 'lisp-eval-region)
     (define-key paredit-mode-map (kbd "C-c C-v") 'lisp-show-variable-documentation)
     (define-key paredit-mode-map (kbd "C-c C-z") 'run-clojure)
     (define-key paredit-mode-map (kbd "C-M-x") 'lisp-eval-defun)
     (define-key paredit-mode-map (kbd "C-M-q") 'indent-sexp)))

(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
(add-hook 'lisp-mode-hook              #'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook  #'enable-paredit-mode)
(add-hook 'clojure-mode-hook           #'enable-paredit-mode)

(setq inferior-lisp-program "clojure")

(defun run-clojure (cmd)
  (interactive (list (read-from-minibuffer "Command:" "clojure")))
  (let ((default-directory (if (fboundp 'clojure-project-root-path)
			                   (clojure-project-root-path)
			                 default-directory))
	    cb (curent-buffer))
    (run-lisp cmd)
    (switch-to-buffer cb)
    (switch-to-buffer-other-window "*inferior-lisp*")))
